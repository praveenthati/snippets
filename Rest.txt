    // SPRING SECURITY //
	https://github.com/praveenthati/spring-playground/blob/master/src/test/java/com/example/AdminEmployeesControllerTest.java
	@AuthenticationPrincipal 
    https://github.com/praveenthati/spring-drills/tree/authorization-assessment/assessments/spring-professionals
	@PreAuthorize("hasAnyRole('ADMIN,PROFESSIONAL') and @getAuthorizationManagement.IsAuthorizedToView(#currentProfessional,#id)")
	
	 @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN,PROFESSIONAL') and @getAuthorizationManagement.IsAuthorizedToView(#currentProfessional,#id)")
    public MappingJacksonValue getProfessional(@AuthenticationPrincipal Professional currentProfessional, @PathVariable Long id) throws Exception {


        MappingJacksonValue returnVal = null;
        Professional professional = db.findOne(id);

        String role = currentProfessional != null ? currentProfessional.getRole() : "ANONYMOUS";

        switch (role) {
            case "ADMIN":
                returnVal = new MappingJacksonValue(professional);
                returnVal.setSerializationView(Views.AdminUserView.class);
                break;
            case "PROFESSIONAL":
                returnVal = new MappingJacksonValue(professional);
                if (currentProfessional.getId().longValue() == professional.getId().longValue()) {
                    returnVal.setSerializationView(Views.ProfessionalUserSelfView.class);
                } else {
                    returnVal.setSerializationView(Views.ProfessionalUserView.class);
                }
                break;
        }

        return returnVal;
    }



    // MOCK SERVER FOR REST TEMPLATES //
   --> https://github.com/praveenthati/spring-playground/blob/master/src/test/java/com/example/testOMDBServiceWithMockServer.java
   --> https://github.com/praveenthati/spring-drills/blob/rest-template-assessment/assessments/resttemplate-reviews/src/test/Java/com/galvanize/testReviewController.java
   @RunWith(SpringRunner.class)
   public class DemoApplicationTests {

    @Test
    public void getRequestWorks() {
        ZenService service = new ZenService();

        // #1 - mock the correct instance
        MockRestServiceServer mockServer = MockRestServiceServer.createServer(service.getRestTemplate());

        mockServer
                .expect(requestTo("https://api.github.com/zen"))                // <-- #2
                .andExpect(method(HttpMethod.GET))                              // <-- #3
                .andRespond(withSuccess("FooBar", MediaType.APPLICATION_JSON)); // <-- #4

        assertThat(service.getMessage(), equalTo("FooBar"));                    // <-- #5
        mockServer.verify();                                                    // <-- #6
    }

   }


   // REST TEMPLATES //
	--> https://github.com/praveenthati/spring-drills/blob/rest-template-assessment/assessments/resttemplate-reviews/src/main/java/com/galvanize/service/MoviesService.java
	private final RestTemplate restTemplate = new RestTemplate();
	
	public String getMessage() {
        return this.restTemplate.getForObject( // <------ #3
          "https://api.github.com/zen",
          String.class
        );
    }

	public MessageReceipt postMessage(Message message) {
    // Construct a URI from a template
    URI uri = UriComponentsBuilder
            .fromUriString("{host}/messages/send")
            .buildAndExpand(config.getUrl())
            .toUri();

    // Create the request object
    RequestEntity<?> request = RequestEntity.post(uri)
            .header("Authorization", config.getToken())
            .body(message);

    // Execute the request
    ResponseEntity<MessageReceipt> response = this.restTemplate.exchange(
            request,
            MessageReceipt.class // Declare the _type_ of the response
    );

    // Get the deserialized response body
    return response.getBody();
   }
   
    ResponseEntity<Map<String, String>> responseEntity = this.restTemplate.exchange(
    requestEntity,
    new ParameterizedTypeReference<Map<String, String>>() {
    },
  );

  



    //// SAMPLE GRADLE ////
	
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-devtools")
	compile('org.springframework.boot:spring-boot-starter-actuator')
    runtime('mysql:mysql-connector-java')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile('com.google.code.gson:gson:2.8.0')
	compile('org.springframework.boot:spring-boot-starter-security')
    testCompile('org.springframework.security:spring-security-test')
	
	// FINDING DEPENDENCY //
	http://start.spring.io/dependencies
	http://search.maven.org/
	
	// ADDING DATABASE TO PROJECT //
	
	spring.datasource.url=jdbc:mysql://localhost/spring_playground?serverTimezone=UTC
	spring.datasource.username=root
	spring.datasource.password=
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
	spring.jpa.hibernate.ddl-auto=none
	spring.jpa.properties.hibernate.show_sql=true
	spring.jpa.properties.hibernate.use_sql_comments=true
    spring.jpa.properties.hibernate.format_sql=true
	
	//actuator //
	management.port: 9001
	management.address: 127.0.0.1
	management.security.enabled=false
	
	// JPA //
	public interface LessonRepository extends CrudRepository<Lesson, Long> {}
	
	// ENTITY //
	@Entity
	@Table(name = "lessons")
	public class Lesson {

		@Id
		@GeneratedValue(strategy = GenerationType.AUTO)
		private Long id;
		private String title;


		@Column(columnDefinition = "date")
		@JsonFormat(pattern = "yyyy-MM-dd")
		private Date deliveredOn;

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public Date getDeliveredOn() {
			return deliveredOn;
		}

		public void setDeliveredOn(Date deliveredOn) {
			this.deliveredOn = deliveredOn;
		}
	}


   // READ FILE FROM RESOURCES //
   private String getJSON(String path) throws Exception {
        URL url = this.getClass().getResource(path);
        return new String(Files.readAllBytes(Paths.get(url.getFile())));
    }
	
	// SAMPLE READ FILE AND TEST //
	RequestBuilder request = post("/activities/simplify")
                .contentType(MediaType.APPLICATION_JSON)
                .header("Accept", "application/vnd.galvanize.compact+json")
                .content(getJSON("/request.json"));

    mvc.perform(request)
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.[0].userId").doesNotExist())
                .andExpect(jsonPath("$.[0].user", equalTo("someuser")));
	

	// JSON ATTRIBUTES //

	-> MappingJacksonValue
	-> JsonView
	-> JsonInclude
	-> JsonProperty
	-> JsonCreator
	-> JsonSetter, JsonGetter
	
	// CHANGE VIEW RUN TIME //
	->  @GetMapping("/{id}")
public MappingJacksonValue getUser(@PathVariable int id) {

    User user = userService.getUsers(id);
    MappingJacksonValue value = new MappingJacksonValue(user);

    if (user.isActive()) {
        value.setSerializationView(Views.ActiveView.class);
    } else {
        value.setSerializationView(Views.InActiveView.class);
    }

    return value;
}

   // MOCK BEAN
   
   @RunWith(SpringRunner.class)
	@WebMvcTest(StringsController.class)
	public class StringsControllerTest {
		@MockBean
		MyConfig config;

		@Before
		public void setup() {
			when(config.getDelimiter()).thenReturn(":");
		}

	}
	
	// TEST PROPERTY SOURCE
	@TestPropertySource(properties = {
        "myConfig.delimiter=-",
        "myConfig.words[0]=Hello",
        "myConfig.words[1]=there",
        "myConfig.words[2]=world",
	})

  // SAMPLE TESTS //
  -> CRUD https://github.com/praveenthati/spring-playground/blob/master/src/test/java/com/example/LessonsControllerTest.java
  
  
  // SAMPLE SECURITY CONFIG //
  --> https://github.com/praveenthati/spring-playground/blob/master/src/main/java/com/example/security/SecurityConfig.java
  
  
  
  
  
  
  
  
  
  
  
  
  ----------------------- go over -----------------------------------
  https://github.com/praveenthati/spring-drills/blob/ioc-and-config/assessments/ioc-and-config/src/main/java/com/galvanize/service/CsvFormatter.java