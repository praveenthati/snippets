 
    //// SAMPLE GRADLE ////
	
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('mysql:mysql-connector-java')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile('com.google.code.gson:gson:2.8.0')
	
	// ADDING DATABASE TO PROJECT //
	
	spring.datasource.url=jdbc:mysql://localhost/spring_playground?serverTimezone=UTC
	spring.datasource.username=root
	spring.datasource.password=
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	spring.jpa.hibernate.ddl-auto=update
	spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
	
	// JPA //
	public interface LessonRepository extends CrudRepository<Lesson, Long> {}
	
	// ENTITY //
	@Entity
	@Table(name = "lessons")
	public class Lesson {

		@Id
		@GeneratedValue(strategy = GenerationType.AUTO)
		private Long id;
		private String title;


		@Column(columnDefinition = "date")
		@JsonFormat(pattern = "yyyy-MM-dd")
		private Date deliveredOn;

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public Date getDeliveredOn() {
			return deliveredOn;
		}

		public void setDeliveredOn(Date deliveredOn) {
			this.deliveredOn = deliveredOn;
		}
	}


   // READ FILE FROM RESOURCES //
   private String getJSON(String path) throws Exception {
        URL url = this.getClass().getResource(path);
        return new String(Files.readAllBytes(Paths.get(url.getFile())));
    }
	
	// SAMPLE READ FILE AND TEST //
	RequestBuilder request = post("/activities/simplify")
                .contentType(MediaType.APPLICATION_JSON)
                .header("Accept", "application/vnd.galvanize.compact+json")
                .content(getJSON("/request.json"));

    mvc.perform(request)
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.[0].userId").doesNotExist())
                .andExpect(jsonPath("$.[0].user", equalTo("someuser")));
	

	// JSON ATTRIBUTES //

	-> MappingJacksonValue
	-> JsonView
	-> JsonInclude
	-> JsonProperty
	-> JsonCreator
	-> JsonSetter, JsonGetter
	
	// CHANGE VIEW RUN TIME //
	->  @GetMapping("/{id}")
public MappingJacksonValue getUser(@PathVariable int id) {

    User user = userService.getUsers(id);
    MappingJacksonValue value = new MappingJacksonValue(user);

    if (user.isActive()) {
        value.setSerializationView(Views.ActiveView.class);
    } else {
        value.setSerializationView(Views.InActiveView.class);
    }

    return value;
}